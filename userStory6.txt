Perfect üëç I‚Äôll give you the **complete working setup** for:

1. ‚úÖ `OfferOrchestrationService.java`
2. ‚úÖ Updated `OfferController.java`
3. ‚úÖ Updated React component (`CreditCardOfferCustomer.js`)

This way you‚Äôll have **one clean endpoint** for the frontend (`/api/offers/accept`) while backend orchestrates **Customer + Offer + Email + PrintShop**.

---

### 1Ô∏è‚É£ `OfferOrchestrationService.java`

Create this file in:

```
src/main/java/com/scb/creditcardorigination/userStory6/service/OfferOrchestrationService.java
```

```java
package com.scb.creditcardorigination.userStory6.service;

import com.scb.creditcardorigination.userStory6.dto.AcceptOfferRequest;
import com.scb.creditcardorigination.userStory6.dto.AcceptOfferResponse;
import com.scb.creditcardorigination.userStory6.dto.EmailRequest;
import com.scb.creditcardorigination.userStory6.model.Customer;
import com.scb.creditcardorigination.userStory6.model.PrintShopRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class OfferOrchestrationService {

    private final OfferService offerService;
    private final CustomerService customerService;
    private final EmailService emailService;
    private final PrintShopService printShopService;

    public OfferOrchestrationService(
            OfferService offerService,
            CustomerService customerService,
            EmailService emailService,
            PrintShopService printShopService
    ) {
        this.offerService = offerService;
        this.customerService = customerService;
        this.emailService = emailService;
        this.printShopService = printShopService;
    }

    public ResponseEntity<AcceptOfferResponse> processOfferAcceptance(AcceptOfferRequest request) {
        // Step 1: Create/Save customer
        Customer customer = new Customer();
        customer.setName(request.getCustomerName());
        customer.setEmailId(request.getEmailId());
        ResponseEntity<Customer> savedCustomer = customerService.saveCustomer(customer);

        // Step 2: Accept the offer
        ResponseEntity<AcceptOfferResponse> offerResponse = offerService.acceptOffer(request);

        // Step 3: Send confirmation email
        EmailRequest emailRequest = new EmailRequest();
        emailRequest.setEmailId(request.getEmailId());
        emailRequest.setCardNumber(request.getCardNumber());
        emailService.sendConfirmation(emailRequest.getEmailId(), emailRequest.getCardNumber());

        // Step 4: Send request to Print Shop
        PrintShopRequest psr = new PrintShopRequest();
        psr.setCustomerId(savedCustomer.getBody().getId());
        psr.setCardNumber(request.getCardNumber());
        printShopService.saveRequest(psr);

        return offerResponse;
    }

    public ResponseEntity<String> processOfferDecline(Long offerId) {
        // Let OfferService handle decline
        return offerService.declineOffer(offerId);
    }
}
```

---

### 2Ô∏è‚É£ Updated `OfferController.java`

```java
package com.scb.creditcardorigination.userStory6.controller;

import com.scb.creditcardorigination.userStory6.dto.AcceptOfferRequest;
import com.scb.creditcardorigination.userStory6.dto.AcceptOfferResponse;
import com.scb.creditcardorigination.userStory6.model.CreditCardOffer;
import com.scb.creditcardorigination.userStory6.service.OfferOrchestrationService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/offers")
public class OfferController {

    private final OfferOrchestrationService orchestrationService;

    public OfferController(OfferOrchestrationService orchestrationService) {
        this.orchestrationService = orchestrationService;
    }

    // Accept credit card offer (orchestrates Customer + Offer + Email + PrintShop)
    @PostMapping("/accept")
    public ResponseEntity<AcceptOfferResponse> acceptOffer(@RequestBody AcceptOfferRequest request) {
        return orchestrationService.processOfferAcceptance(request);
    }

    // Decline offer
    @PostMapping("/decline/{offerId}")
    public ResponseEntity<String> declineOffer(@PathVariable Long offerId) {
        return orchestrationService.processOfferDecline(offerId);
    }

    // Get all offers
    @GetMapping
    public List<CreditCardOffer> getAllOffers() {
        // Directly delegate to OfferService (optional orchestration not needed here)
        return orchestrationService.getAllOffers();
    }
}
```

‚ö†Ô∏è Note: For the `getAllOffers()` method, you can either:

* expose a simple passthrough in `OfferOrchestrationService`, OR
* inject `OfferService` directly in controller for that call.

---

### 3Ô∏è‚É£ Updated React Component (`CreditCardOfferCustomer.js`)

Now, wire up the **accept/decline buttons** to call the backend (`/api/offers/accept` and `/api/offers/decline/{id}`).

```javascript
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './CreditCardOffer.css';
import logo from '../assets/creditcard.png';
import free_button from '../assets/free_button.png';
import lightning from '../assets/lightning.png';
import gift_box from '../assets/gift_box.png';
import phone from '../assets/phone.png';

const CreditCardOfferCustomer = () => {
  const navigate = useNavigate();
  const [notification, setNotification] = useState({ show: false, message: '', type: '' });

  const handleAccept = async () => {
    try {
      const response = await fetch('/api/offers/accept', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          customerName: 'John Doe',   // Replace with real user data
          emailId: 'john.doe@example.com',
          cardNumber: '1234-5678-9012-3456'
        })
      });

      if (response.ok) {
        setNotification({ show: true, message: 'Offer Accepted Successfully', type: 'success-banner' });
      } else {
        setNotification({ show: true, message: 'Failed to accept offer', type: 'decline-banner' });
      }
    } catch (error) {
      setNotification({ show: true, message: 'Error: ' + error.message, type: 'decline-banner' });
    }
  };

  const handleDecline = async () => {
    try {
      const response = await fetch('/api/offers/decline/1', {  // Replace `1` with actual offerId
        method: 'POST'
      });

      if (response.ok) {
        setNotification({ show: true, message: 'Offer Declined Successfully', type: 'decline-banner' });
      } else {
        setNotification({ show: true, message: 'Failed to decline offer', type: 'decline-banner' });
      }
    } catch (error) {
      setNotification({ show: true, message: 'Error: ' + error.message, type: 'decline-banner' });
    }
  };

  return (
    <div className="offer-container">
      <div className="offer-card">
        <div className="header">
          <h1 className="congratulations">Congratulations!</h1>
          <p className="subtitle">
            User, here is your <span className="highlight">lifetime-free</span> Standard Chartered<br />
            Credit Card offer
          </p>
        </div>

        <div className="content">
          <div className="card-section">
            <div className="credit-card-image">
              <img src={logo} alt="Standard Chartered Platinum Credit Card" className="card-img" />
            </div>
          </div>

          <div className="details-section">
            <div className="credit-limit">
              <h2>Credit Limit</h2>
              <div className="amount">‚Çπ1,50,000</div>
              <p className="availability">Available immediately upon approval</p>
            </div>

            <div className="interest-rate">
              <h3>Interest Rate </h3>
              <div className="rates">
                <div className="rate-item">
                  <span className="rate-label">Starting 2.49% p.m.</span>
                  <span className="rate-value">2.75%</span>
                  <span className="rate-desc">per month</span>
                  <small>*Interest charged only on outstanding balance</small>
                </div>
                <div className="rate-item special">
                  <span className="rate-label">Special Offer</span>
                  <span className="rate-value">33.00%</span>
                  <span className="rate-desc">per annum</span>
                </div>
              </div>
            </div>

            <div className="features">
              <div className="feature-item"><img src={free_button} className="feature-icon" /><span>Lifetime free</span></div>
              <div className="feature-item"><img src={lightning} className="feature-icon" /><span>Instant Approval</span></div>
              <div className="feature-item"><img src={gift_box} className="feature-icon" /><span>Reward Points</span></div>
              <div className="feature-item"><img src={phone} className="feature-icon" /><span>Contactless Pay</span></div>
            </div>
          </div>
        </div>

        {notification.show && (
          <div className={`${notification.type}`}>
            <h3>{notification.message}</h3>
            <div className="actions">
              <button onClick={() => navigate('/home')}>Go Back to Home</button>
            </div>
          </div>
        )}

        {!notification.show && (
          <div className="actions">
            <button className="accept-btn" onClick={handleAccept}>Accept</button>
            <button className="decline-btn" onClick={handleDecline}>Decline</button>
          </div>
        )}
      </div>
    </div>
  );
};

export default CreditCardOfferCustomer;
```

---

‚úÖ Now your flow is:
React ‚Üí `/api/offers/accept` ‚Üí OfferController ‚Üí OrchestrationService ‚Üí Customer + Offer + Email + PrintShop

All 4 services get triggered properly üéâ

---

Do you also want me to show you how to **test this end-to-end** with Postman (for both Accept & Decline) before wiring React?

//credit card aacount
package com.scb.creditcardorigination.userStory6.model;
import jakarta.persistence.*;

import java.nio.channels.AcceptPendingException;
import java.time.LocalDateTime;

@Entity
@Table(name = "credit_card_accounts")
public class CreditCardAccount {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;
    private  String emailId;
    private String cardNumber;
    private LocalDateTime createdAt;

    @ManyToOne
    @JoinColumn(name = "customer_id")
    private Customer customer;
    @ManyToOne
    @JoinColumn(name = "offer_id")
    private CreditCardOffer offer;

    public CreditCardAccount() {
    }

    public CreditCardAccount(String cardNumber, LocalDateTime createdAt, Customer customer, CreditCardOffer offer) {
        this.cardNumber = cardNumber;
        this.createdAt = createdAt;
        this.customer = customer;
        this.offer = offer;
    }


    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getCardNumber() {
        return cardNumber;
    }

    public void setCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public Customer getCustomer() {
        return customer;
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
    }

    public CreditCardOffer getOffer() {
        return offer;
    }

    public void setOffer(CreditCardOffer offer) {
        this.offer = offer;
    }

    public void setStatus(String active) {
    }

    public void setCreditLimit(LocalDateTime creditLimit) {
    }

    public void setEmailId(String emailId) {
        this.emailId = emailId;
    }

    public String getEmailId() {
        return  emailId;
    }
}
//credit card oofer
package com.scb.creditcardorigination.userStory6.model;
import jakarta.persistence.*;
import java.time.LocalDateTime;

import static org.springframework.data.jpa.domain.AbstractPersistable_.id;

@Entity
@Table(name = "credit_card_offers")
public class CreditCardOffer {
    public long getOffer_id() {
        return offer_id;
    }

    public void setOffer_id(long offer_id) {
        this.offer_id = offer_id;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long offer_id;
    private String offer_name;
    private String description;
    private double annual_fee;

    public String getOffer_name() {
        return offer_name;
    }
    public void setOffer_name(String offer_name) {
        this.offer_name = offer_name;
    }
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public double getAnnual_fee() {
        return annual_fee;
    }
    public void setAnnual_fee(double annual_fee) {
        this.annual_fee = annual_fee;
    }
    public CreditCardOffer(){}

    public LocalDateTime getCreditLimit() {

        return null;
    }
    public String getCardNumber() {
        return null;
    }


    public void setStatus(String accepted) {
    }
}
//customer.java
package com.scb.creditcardorigination.userStory6.model;
import jakarta.persistence.*;
@Entity
@Table(name = "customers")
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private  long id;
    private String name;
    private String email;
    private String phone;
    public Customer(){}


    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public Customer(String name, String email, String phone) {

        this.name = name;
        this.email = email;
        this.phone = phone;
    }
}

//email log.java
package com.scb.creditcardorigination.userStory6.model;

import jakarta.persistence.*;

import java.time.LocalDateTime;

@Entity
@Table(name = "email_log")
public class EmailLog {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
   private String emailId;

    private String cardNumber;
    @Column(length = 1000)
    private String message;

    private LocalDateTime sentAt;
    public EmailLog() {}

    public EmailLog(String emailId, String cardNumber, String message, LocalDateTime sentAt) {
        this.emailId = emailId;
        this.cardNumber = cardNumber;
        this.message = message;
        this.sentAt = sentAt;
    }


    public Long getId() {
        return id;
    }

    public String getEmailId() {
        return emailId;
    }

    public void setEmailId(String emailId) {
        this.emailId = emailId;
    }

    public String getCardNumber() {
        return cardNumber;
    }

    public void setCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public LocalDateTime getSentAt() {
        return sentAt;
    }

    public void setSentAt(LocalDateTime sentAt) {
        this.sentAt = sentAt;
    }

    @Override
    public String toString() {
        return "EmailLog{" +
                "id=" + id +
                ", EmailId=" + emailId +
                ", cardNumber='" + cardNumber + '\'' +
                ", message='" + message + '\'' +
                ", sentAt=" + sentAt +
                '}';
    }
}

//printshop.java
package com.scb.creditcardorigination.userStory6.model;
import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "printingShop_requests")
public class PrintShopRequest {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;
    private Long accountId;
    private  String status;
    private String details;
    private LocalDateTime requestTime;

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public long getAccountId() {
        return accountId;
    }

    public void setAccountId(long accountId) {
        this.accountId = accountId;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }
    public  void setDetails(String details){
        this.details = details;
    }
    public  void setRequestTime(LocalDateTime requestTime){
        this.requestTime = requestTime;
    }

    public String getDetails() {
        return details;
    }

    public LocalDateTime getRequestTime() {
        return requestTime;
    }
}

//accept offer request
package com.scb.creditcardorigination.userStory6.dto;

public class AcceptOfferRequest {
    private long offer_id;
    private String offer_name;
    private String description;
    private double annual_fee;

    public AcceptOfferRequest(long offer_id, String offer_name, String description, double annual_fee) {
        this.offer_id = offer_id;
        this.offer_name = offer_name;
        this.description = description;
        this.annual_fee = annual_fee;
    }

    public long getOffer_id() {
        return offer_id;
    }

    public void setOffer_id(long offer_id) {
        this.offer_id = offer_id;
    }

    public String getOffer_name() {
        return offer_name;
    }

    public void setOffer_name(String offer_name) {
        this.offer_name = offer_name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public double getAnnual_fee() {
        return annual_fee;
    }

    public void setAnnual_fee(double annual_fee) {
        this.annual_fee = annual_fee;
    }

    public Long getOfferId() {
        return offer_id;
    }

}
//accept offer response 
package com.scb.creditcardorigination.userStory6.dto;


public class AcceptOfferResponse {
    private String status;
    private String message;
    private String cardNumber;

    public AcceptOfferResponse(boolean b, String message, String cardNumber) {
        this.status = b ? "Success" : "Failure";
        this.message = message;
        this.cardNumber = cardNumber;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getCardNumber() {
        return cardNumber;
    }

    public void setCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
    }
}

email request dto 
package com.scb.creditcardorigination.userStory6.dto;

public class EmailRequest {
    private String emailId;
    private String cardNumber;

    public EmailRequest() {
    }

    public String getEmailId() {
        return emailId;
    }

    public void setEmailId(String emailId) {
        this.emailId = emailId;
    }

    public String getCardNumber() {
        return cardNumber;
    }

    public void setCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
    }
}

Perfect üëç ‚Äî let‚Äôs consolidate everything so you have **clean working code** for your orchestration, controller, and React side.

I‚Äôll give you the **full updated versions** of:

1. `OfferAcceptanceRequest` DTO (new)
2. `OfferOrchestrationService`
3. `OfferController`
4. React frontend page (single page integration)

---

## 1Ô∏è‚É£ New DTO ‚Üí `OfferAcceptanceRequest.java`

```java
package com.scb.creditcardorigination.userStory6.dto;

public class OfferAcceptanceRequest {
    private long offerId;
    private String offerName;
    private String description;
    private double annualFee;

    private String customerName;
    private String email;
    private String phone;

    private String cardNumber;

    public long getOfferId() {
        return offerId;
    }

    public void setOfferId(long offerId) {
        this.offerId = offerId;
    }

    public String getOfferName() {
        return offerName;
    }

    public void setOfferName(String offerName) {
        this.offerName = offerName;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public double getAnnualFee() {
        return annualFee;
    }

    public void setAnnualFee(double annualFee) {
        this.annualFee = annualFee;
    }

    public String getCustomerName() {
        return customerName;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getCardNumber() {
        return cardNumber;
    }

    public void setCardNumber(String cardNumber) {
        this.cardNumber = cardNumber;
    }
}
```

---

## 2Ô∏è‚É£ Updated `OfferOrchestrationService.java`

```java
package com.scb.creditcardorigination.userStory6.service;

import com.scb.creditcardorigination.userStory6.dto.AcceptOfferRequest;
import com.scb.creditcardorigination.userStory6.dto.AcceptOfferResponse;
import com.scb.creditcardorigination.userStory6.dto.EmailRequest;
import com.scb.creditcardorigination.userStory6.dto.OfferAcceptanceRequest;
import com.scb.creditcardorigination.userStory6.model.CreditCardAccount;
import com.scb.creditcardorigination.userStory6.model.Customer;
import com.scb.creditcardorigination.userStory6.model.PrintShopRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
public class OfferOrchestrationService {

    private final OfferService offerService;
    private final CustomerService customerService;
    private final EmailService emailService;
    private final PrintShopService printShopService;

    public OfferOrchestrationService(
            OfferService offerService,
            CustomerService customerService,
            EmailService emailService,
            PrintShopService printShopService
    ) {
        this.offerService = offerService;
        this.customerService = customerService;
        this.emailService = emailService;
        this.printShopService = printShopService;
    }

    public ResponseEntity<AcceptOfferResponse> processOfferAcceptance(OfferAcceptanceRequest request) {
        // Step 1: Save Customer
        Customer customer = new Customer();
        customer.setName(request.getCustomerName());
        customer.setEmail(request.getEmail());
        customer.setPhone(request.getPhone());
        ResponseEntity<Customer> savedCustomer = customerService.saveCustomer(customer);

        // Step 2: Call OfferService
        AcceptOfferRequest offerRequest = new AcceptOfferRequest(
                request.getOfferId(),
                request.getOfferName(),
                request.getDescription(),
                request.getAnnualFee()
        );
        ResponseEntity<AcceptOfferResponse> offerResponse = offerService.acceptOffer(offerRequest);

        // Step 3: Create CreditCardAccount
        CreditCardAccount account = new CreditCardAccount();
        account.setCardNumber(request.getCardNumber());
        account.setEmailId(request.getEmail());
        account.setCustomer(savedCustomer.getBody());
        account.setCreatedAt(LocalDateTime.now());
        // üëâ Save account if you have a CreditCardAccountRepository

        // Step 4: Send Email
        EmailRequest emailRequest = new EmailRequest();
        emailRequest.setEmailId(request.getEmail());
        emailRequest.setCardNumber(request.getCardNumber());
        emailService.sendConfirmation(emailRequest.getEmailId(), emailRequest.getCardNumber());

        // Step 5: PrintShop Request
        PrintShopRequest psr = new PrintShopRequest();
        psr.setAccountId(account.getId());
        psr.setStatus("PENDING");
        psr.setDetails("Print card for customer: " + request.getCustomerName());
        psr.setRequestTime(LocalDateTime.now());
        printShopService.saveRequest(psr);

        return offerResponse;
    }

    public ResponseEntity<String> processOfferDecline(Long offerId) {
        return offerService.declineOffer(offerId);
    }
}
```

---

## 3Ô∏è‚É£ Updated `OfferController.java`

```java
package com.scb.creditcardorigination.userStory6.controller;

import com.scb.creditcardorigination.userStory6.dto.AcceptOfferResponse;
import com.scb.creditcardorigination.userStory6.dto.OfferAcceptanceRequest;
import com.scb.creditcardorigination.userStory6.service.OfferOrchestrationService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/offers")
public class OfferController {

    private final OfferOrchestrationService orchestrationService;

    public OfferController(OfferOrchestrationService orchestrationService) {
        this.orchestrationService = orchestrationService;
    }

    @PostMapping("/accept")
    public ResponseEntity<AcceptOfferResponse> acceptOffer(@RequestBody OfferAcceptanceRequest request) {
        return orchestrationService.processOfferAcceptance(request);
    }

    @PostMapping("/decline/{offerId}")
    public ResponseEntity<String> declineOffer(@PathVariable Long offerId) {
        return orchestrationService.processOfferDecline(offerId);
    }
}
```

---

## 4Ô∏è‚É£ React Code (Single Page ‚Üí `CreditCardOfferCustomer.js`)

```jsx
import React, { useState } from "react";
import axios from "axios";

export default function CreditCardOfferCustomer() {
  const [offer, setOffer] = useState({
    offerId: "",
    offerName: "",
    description: "",
    annualFee: ""
  });

  const [customer, setCustomer] = useState({
    customerName: "",
    email: "",
    phone: ""
  });

  const [cardNumber, setCardNumber] = useState("");

  const handleAccept = async () => {
    const requestData = {
      offerId: offer.offerId,
      offerName: offer.offerName,
      description: offer.description,
      annualFee: offer.annualFee,
      customerName: customer.customerName,
      email: customer.email,
      phone: customer.phone,
      cardNumber: cardNumber
    };

    try {
      const response = await axios.post("http://localhost:8080/api/offers/accept", requestData);
      alert("Offer Accepted: " + response.data.message);
    } catch (error) {
      console.error(error);
      alert("Error accepting offer");
    }
  };

  return (
    <div>
      <h2>Accept Credit Card Offer</h2>
      <input
        type="text"
        placeholder="Offer ID"
        value={offer.offerId}
        onChange={(e) => setOffer({ ...offer, offerId: e.target.value })}
      />
      <input
        type="text"
        placeholder="Offer Name"
        value={offer.offerName}
        onChange={(e) => setOffer({ ...offer, offerName: e.target.value })}
      />
      <input
        type="text"
        placeholder="Description"
        value={offer.description}
        onChange={(e) => setOffer({ ...offer, description: e.target.value })}
      />
      <input
        type="number"
        placeholder="Annual Fee"
        value={offer.annualFee}
        onChange={(e) => setOffer({ ...offer, annualFee: e.target.value })}
      />
      <br />

      <h3>Customer Info</h3>
      <input
        type="text"
        placeholder="Customer Name"
        value={customer.customerName}
        onChange={(e) => setCustomer({ ...customer, customerName: e.target.value })}
      />
      <input
        type="email"
        placeholder="Email"
        value={customer.email}
        onChange={(e) => setCustomer({ ...customer, email: e.target.value })}
      />
      <input
        type="text"
        placeholder="Phone"
        value={customer.phone}
        onChange={(e) => setCustomer({ ...customer, phone: e.target.value })}
      />
      <input
        type="text"
        placeholder="Card Number"
        value={cardNumber}
        onChange={(e) => setCardNumber(e.target.value)}
      />
      <br />
      <button onClick={handleAccept}>Accept Offer</button>
    </div>
  );
}
```

---

### ‚úÖ Summary

* No need to touch your existing **models**.
* We only added **1 new DTO** (`OfferAcceptanceRequest`) to combine customer + offer + card data.
* `OfferOrchestrationService` now works cleanly with your models.
* `OfferController` exposes `/api/offers/accept` and `/api/offers/decline/{id}`.
* React frontend posts all necessary data in one request.

---

Do you also want me to add the **CreditCardAccountRepository** so your new `CreditCardAccount` actually gets persisted instead of just being created in memory?




